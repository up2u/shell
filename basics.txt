1: syntax: expr op1 operator op2 #space is required between number and operator
[maolijie@neptune ~]$ expr 5 + 2   
7 

2: integer(Number without decimal point)
  -eq -ne -lt -le -gt -ge 
  if test 5 -eq 6

3: string Comparisons
   string1  = string2
   string1 != string2
   string              string1 is NOT NULL or not defined
   -n string1          string1 is NOT NULL and does exist
   -z string1          string1 is NULL and does exist

4: file and directory
   -s file              Non empty file 
   -f file              Is File exist or normal file and not a directory
   -d dir               Is Directory exist and not a file
   -w file              Is writeable file
   -r file              Is read-only file
   -x file              Is file is executable
5: Logical Operators
   !                    NOT
   -a                   AND
   -o                   OR
6:
1) if condition
   then
   
   else
	   
   fi 

2):if condition
   then

   elif condition

   elif condition

   else

   fi
7:for var in list
  do
 
  done

8:while condition
  do
	  
  done 

9: case $vari in 
     pattern)
	           command
			   ;;
     pattern)
	           command
			   ;;
     *)
	           command
			   ;;
   esac
 
 10: positional parameters
 
  $#        Number of command line arguments
  $*        All of the positional parameters, seen as a single word
            "$*" must be quoted.
  $@        Same as $*, but each parameter is a quoted string
			that is, the parameters are passed on intact, 
			without interpretation or expansion.  This means, 
			among other things, that each parameter in the 
			argument list is seen as a separate word.
			"$@" should be quoted

  $-        Flags passed to script(using set)
            This was originally a ksh construct adopted into Bash

  $!        PID (process ID) of last job run in background

  $_        Special variable set to last argument of previous 
            command executed.

            example:
			#! /bin/bash
			
			echo $_           # /bin/bash

			du > /dev/null 
			echo $_           # du

			ls -al > /dev/null
			echo $_           # -al (last argument)

			:
			echo $_           # :

  $?    Exit status of a command
  $$    Process ID of the script itself.



























