1: syntax: expr op1 operator op2 #space is required between number and operator
[maolijie@neptune ~]$ expr 5 + 2   
7 

2: integer(Number without decimal point)
  -eq -ne -lt -le -gt -ge 
  if test 5 -eq 6

  < <= > >=  use (("$a" < "$b"))
  usage of (());
  eg: d=$((2+3))
  if (("$a" <= "$b")) ; then  echo true; else echo err ; fi

3: string Comparisons
   string1  = string2
   string1 != string2
   string              string1 is NOT NULL or not defined
   -n string1          string1 is NOT NULL and does exist
   -z string1          string1 is NULL and does exist

4: file and directory
   -e/-a                file exists
   -s file              Non empty file 
   -f file              Is File exist or normal file and not a directory
   -d dir               Is Directory exist and not a file
   -w file              Is writeable file
   -r file              Is has read permission
   -x file              Is file is executable
   -b                   file is a block device
   -c                   file is a character device
   -p                   file is a pipe
   -h                   file is a symbolic link 
   -L                   ..
   -S                   file is a socket
   -t                   file (descriptor) is associated with a terminal device
   -g/-u/-k             set group-id/user-id/sticky bit set
   -O/-G                owner/group of your
   f1 -nt f2            newer than
   f1 -ot f2            older than
   f1 -ef f2            f1,f2 are hard links to same file
   
5: Logical Operators
   !                    NOT
   -a                   AND
   -o                   OR
6:
1) if condition
   then
   
   else
	   
   fi 

2):if condition
   then

   elif condition

   elif condition

   else

   fi
7:for var in list
  do
 
  done

8:while condition
  do
	  
  done 

9: case $vari in 
     pattern)
	           command
			   ;;
     pattern)
	           command
			   ;;
     *)
	           command
			   ;;
   esac
 
 10: positional parameters
 
  $#        Number of command line arguments
  $*        All of the positional parameters, seen as a single word
            "$*" must be quoted.
  $@        Same as $*, but each parameter is a quoted string
			that is, the parameters are passed on intact, 
			without interpretation or expansion.  This means, 
			among other things, that each parameter in the 
			argument list is seen as a separate word.
			"$@" should be quoted

  $-        Flags passed to script(using set)
            This was originally a ksh construct adopted into Bash

  $!        PID (process ID) of last job run in background

  $_        Special variable set to last argument of previous 
            command executed.

            example:
			#! /bin/bash
			
			echo $_           # /bin/bash

			du > /dev/null 
			echo $_           # du

			ls -al > /dev/null
			echo $_           # -al (last argument)

			:
			echo $_           # :

  $?    Exit status of a command
  $$    Process ID of the script itself.

###
  strings
1: string length
  ${#string}
  expr length $string
  expr "$string":'.*'
eg:
  string=abcdef
  echo `expr "$string" : '.*'`              # 6

2:length of matching substring at beginning of string
  expr match "$string" '$substring'
  expr "$string" : '$substring'
eg:
  stringZ=abcABC123ABCabc
  echo `expr match "$stringZ" 'abc[A-Z]*.2'` # 8
  echo `expr "$stringZ" : 'abc[A-Z]*.2'`     # 8
	  
3:index
  expr index $string $substring
       Numerical position in $string of first character 
	   in $substring that matches.
eg:
  stringZ=abcABC123ABCabc
  echo `expr index "$stringZ" C12`           # 6 
                                             # C position
  echo `expr index "$stringZ" 1c`            # 3
  # 'c' (in #3 position) matches before '1'.

4: Substring Extraction

##  0-based indexing.                                                    ## 
  ${string:position} 
   Extracts substring from $string at $position.
   If the $string parameter is "*" or "@", then this extracts 
   the positional parameters,starting at $position.

  ${string:position:length}
   Extracts $length characters of substring from $string at $position.

eg:
  # Is it possible to index from the right end of the string?
  stringZ=abcABC123ABCabc 
  echo ${stringZ:-4}                           # abcABC123ABCabc           ## ??
# Defaults to full string, as in ${parameter:-default}.
# However . . .
  echo ${stringZ:(-4)}                         # Cabc
  echo ${stringZ: -4}                          # Cabc
# Now, it works.
# Parentheses or added space "escape" the position parameter.               ## 


##  1-based indexing.                                                   ## 
 expr substr $string $position $length
   Extracts $length characters from $string starting at $position.

 expr match "$string" '\($substring\)'
 expr "$string" : '\($substring\)'
   Extracts $substring at beginning of $string

 expr match "$string" '.*\($substring\)'
 expr "$string" : '.*\($substring\)'
   Extracts $substring at end of $string

Substring Removal
  ${string#substring}
	Deletes shortest match of $substring from front of $string.
  ${string##substring}
	Deletes longest match of $substring from front of $string.
  ${string%substring}
    Deletes shortest match of $substring from back of $string.
  ${string%%substring}
    Deletes longest match of $substring from back of $string.

Substring Replacement
  ${string/substring/replacement}
    Replace first match of $substring with $replacement.
  ${string//substring/replacement}
    Replace all matches of $substring with $replacement.
  ${string/#substring/replacement}
    If $substring matches front end of $string, substitute $replacement for $substring.
    # must total match with front end
  ${string/%substring/replacement}
    If $substring matches back end of $string, substitute $replacement for $substring.
    # must total match with back end

Parameter Substitution
  ${parameter-default}, ${parameter:-default}
    If parameter not set, use default.
eg:
  echo ${username-`whoami`}
  # Echoes the result of `whoami`, if variable $username is still unset.


  ${parameter=default}, ${parameter:=default}
    If parameter not set, set it to default.
  ${parameter+alt_value}, ${parameter:+alt_value}
    If parameter set, use alt_value, else use null string.
  ${parameter?err_msg}, ${parameter:?err_msg}
    If parameter set, use it, else print err_msg.

Special Characters
  #  Comments
  ;; Terminator in a case option
  .  "dot" character match. When matching characters, as part of a regular 
     expression, a "dot" matches a single character.
  "  partial quoting [double quote]
  '  full quoting [single quote]
  ,  comma operator. The comma operator links together a series of arithmetic
     operations. All are evaluated, but only the last one is returned
  \  escape [backslash]. A quoting mechanism for single characters
  /  Filename path separator [forward slash]
  `  command substitution This is also known as backquotes or backticks.
  :  null command [colon] This is the shell equivalent of a "NOP" 
    eg: 
	  while :    # endless loop
	  : > data.xxx # File "data.xxx" now empty.
      # Same effect as cat /dev/null >data.xxx
  ?  wild card
  $  Variable substitution (contents of a variable)
  $  end-of-line
  ${} Parameter substitution.
  $*, $@ positional parameters.
  $?  exit status variable
  $$  process ID variable
  ()  command group.
    eg: (a=hello; echo $a)
	    # A listing of commands within parentheses starts a subshell.
	  array initialization.
	eg: Array=(element1 element2 element3)
  {xxx,yyy,zzz,....} Brace expansion.
    eg: 
	  cat {file1,file2,file3} > combined_file
      # No spaces allowed within the braces unless the spaces 
	    are quoted or escaped
      echo {file1,file2}\ :{\ A," B",' C'}
      file1 : A file1 : B file1 : C file2 : A file2 : B file2 : C
  {a..z}  Extended Brace expansion      # two dot
    eg: echo {0..3}  # 0 1 2 3
  {}    Block of code [curly brackets]
	   creates an anonymous function (a function without a name). However,
	   unlike in a "standard" function, the variables inside a code block
	   remain visible to the remainder of the script
  {}  placeholder for text, Used after xargs -i (replace strings option)
    eg: ls . | xargs -i -t cp  ./{} $!
  {}\;  pathname. Mostly used in find constructs. 
        This is not a shell builtin.
  []    test
  [[]]  test Test expression between [[ ]]. More flexible than the 
        single-bracket [ ] test, this is a shell keyword
 
  []   array element
     eg:  Array[1]=slot_1
	      echo ${Array[1]}
  []   range of characters  ??
      As part of a regular expression, brackets delineate a 
	  range of characters to match.
  (()) integer expansion.
       Expand and evaluate integer expression between (( )).
  
 redirection.
   command &>filename redirects both the 
          stdout and the stderr of command to filename.
   command >&2 redirects stdout of command to stderr.

  \<, \> word boundary in a regular expression.

  -    redirection from/to stdin or stdout [dash].
    eg: cat -
        123
		123
		^D
  -    The "-" can be used to pipe stdout to other commands.
    eg: Using diff to compare a file with a section of another:
	    grep Linux file1 | diff file2 -

  -  previous working directory

bitwise operators
  << <<=   >> >>= & &=  | |=  ~(NOT) ^(XOR) ^=
logical(boolean) operators
  !  && || 


local  ## 
  local is used within a  function,

1.${var}
2.$(cmd)
3.()å’Œ{}
4.${var:-string},${var:+string},${var:=string},${var:?string}
5.$((exp))
6.${var%pattern},${var%%pattern},${var#pattern},${var##pattern}  


find an empty directory
> find . -maxdepth 1  -type d -empty 









