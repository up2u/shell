1: URLs:
In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository. Depending on the transport protocol, some of this information may be absent.
Git natively supports ssh, git, http, https, ftp, ftps, and rsync protocols. The following syntaxes may be used with them:
      ssh://[user@]host.xz[:port]/path/to/repo.git/
      git://host.xz[:port]/path/to/repo.git/
      http[s]://host.xz[:port]/path/to/repo.git/
      ftp[s]://host.xz[:port]/path/to/repo.git/
      rsync://host.xz/path/to/repo.git/
An alternative scp-like syntax may also be used with the ssh protocol:
      [user@]host.xz:path/to/repo.git/
The ssh and git protocols additionally support ~username expansion:
      ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/
      git://host.xz[:port]/~[user]/path/to/repo.git/
      [user@]host.xz:/~[user]/path/to/repo.git/
For local repositories, also supported by git natively, the following syntaxes may be used:
      /path/to/repo.git/
      file:///path/to/repo.git/

2: git pull
  git pull runs git fetch with the given parameters and calls git merge to merge the retrieved branch heads into the current branch. With --rebase, it runs git rebase instead of git merge.
 
  git pull repository  src[:dst]   (src,dst mainly about branch, also tags or others)

3:git push
  git push repository  src[:dst]   (src,dst mainly about branch, also tags or others)

4: git ls-tree 
   git ls-tree fb3a8bdd0ce
5: git show / log
   git show -s --pretty=raw 2be7fcb476

6: git tag
   git cat-file tag v1.5.0

7: git reset
  > If you get stuck and decide to just give up and throw the whole mess away, you can always return to the pre-merge state with
  $ git reset --hard HEAD
  > Or, if you've already committed the merge that you want to throw away,
  $ git reset --hard ORIG_HEAD
   
8: git config -l 

